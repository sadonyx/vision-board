{"version":3,"sources":["util/useWindowDimensions.js","components/ImgRender.js","context/ColorContext.js","components/PaletteRender.js","components/ColorPicker.js","components/Eyedropper.js","context/TextContext.js","components/TextHandler.js","components/ImgHandler.js","App.js","reportWebVitals.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimension","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","RenderImages","source","getChosenImage","getHoveredImage","showButton","setShowButton","map","image","index","id","bounds","minWidth","minHeight","lockAspectRatio","cancel","className","style","background","blob","backgroundSize","backgroundRepeat","onMouseEnter","condition","onMouseLeave","src","alt","colorScheme","variant","fontSize","size","position","top","left","onClick","bottom","ColorContext","createContext","ColorUpdateContext","useColorContext","useContext","useColorUpdateContext","ColorProvider","children","changeBackground","eyedropOnOff","backgroundColor","rgb","hex","imageHover","selectedColor","eyedropColor","state","setState","handleBackgroundColor","prev","Object","keys","length","Provider","value","handleEyedropColor","handleChangeBackground","boolean","handleSelectedColor","color","toString","r","g","b","PaletteHandler","color_object","retrieveSwatch","selectedSwatch","setSelectedSwatch","swatches","gradient","hexToRgb","result","exec","parseInt","direction","bg","padding","borderRadius","cursor","title","onMouseOver","swatch","getSwatch","generateSwatches","marginTop","gradients","property","gradientType","element","angle","transitionType","duration","generateGradient","ColorPicker","eyedrop_rgb","eyedrop_hex","displayColorPicker","w","h","alignContent","zIndex","right","onChange","EyeDrop","pickedColor","eyedropOnce","eyedropState","setEyedropState","opacity","once","pickRadius","cursorActive","TextContext","TextUpdateContext","useTextUpdateContext","TextProvider","handleNewText","nanoid","content","readOnly","changeTextColor","handleEditText","text","selectedText","filter","obj","handleTextColor","text_object","console","log","TextHandler","name","defaultValue","ImgHandler","selectedImages","setSelectedImages","chosenImage","setChosenImage","setImageHover","hoveredImage","data","usePalette","useWindowDimensions","filterArray","color_array","color_data","prevImages","object","imageHandleChange","e","target","files","fileArray","Array","from","file","URL","createObjectURL","concat","revokeObjectURL","initialScale","minScale","maxScale","initialPositionX","initialPositionY","centerOnInit","centerZoomedOut","limitToBounds","panning","excluded","wheel","step","resetTransform","Fragment","overflow","flexDirection","find","leftIcon","type","multiple","accept","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1878a16.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height,\r\n  };\r\n}\r\n\r\nconst useWindowDimension = () => {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n};\r\n\r\nexport default useWindowDimension;\r\n","import { Rnd } from \"react-rnd\";\r\nimport { useState } from \"react\";\r\nimport { RiGradienterFill } from \"react-icons/ri\";\r\n\r\n//Chakra UI\r\nimport \"../styles/Handler.css\";\r\nimport { ChakraProvider, Box, Button } from \"@chakra-ui/react\";\r\n\r\nconst RenderImages = ({ source, getChosenImage, getHoveredImage }) => {\r\n  const [showButton, setShowButton] = useState(false);\r\n\r\n  return source.map((image, index) => {\r\n    return (\r\n      <ChakraProvider key={image.id}>\r\n        <Rnd\r\n          key={image.id}\r\n          id={image.id}\r\n          bounds=\".boundWindow\"\r\n          minWidth=\"10%\"\r\n          minHeight=\"10%\"\r\n          lockAspectRatio={true}\r\n          cancel=\".cancel\"\r\n          className=\"panningDisabled\"\r\n          style={{\r\n            background: `url(${image.blob})`,\r\n            backgroundSize: \"contain\",\r\n            backgroundRepeat: \"no-repeat\",\r\n          }}\r\n          onMouseEnter={() => {\r\n            setShowButton({ condition: true, id: image.id });\r\n            getHoveredImage(image.blob);\r\n          }}\r\n          onMouseLeave={() => {\r\n            setShowButton({ condition: false, id: image.id });\r\n            getHoveredImage(null);\r\n          }}\r\n        >\r\n          <img src={image.blob} alt={image.id} className=\"selector\" />\r\n          <Button\r\n            id={index}\r\n            colorScheme=\"teal\"\r\n            variant=\"solid\"\r\n            fontSize=\"15pt\"\r\n            size=\"xs\"\r\n            position=\"absolute\"\r\n            top=\"5px\"\r\n            left=\"5px\"\r\n            onClick={() => {\r\n              getChosenImage(image.id);\r\n            }}\r\n            className={\r\n              showButton.condition && showButton.id === image.id\r\n                ? \"visible\"\r\n                : \"invisible\"\r\n            }\r\n          >\r\n            <RiGradienterFill />\r\n          </Button>\r\n        </Rnd>\r\n        <Box position=\"fixed\" bottom=\"30px\" left=\"25px\"></Box>\r\n      </ChakraProvider>\r\n    );\r\n  });\r\n};\r\n\r\nexport default RenderImages;\r\n","import { useContext, useState, createContext } from \"react\";\r\nimport { useEffect } from \"react/cjs/react.development\";\r\n\r\nconst ColorContext = createContext();\r\nconst ColorUpdateContext = createContext();\r\n\r\nexport function useColorContext() {\r\n  return useContext(ColorContext);\r\n}\r\n\r\nexport function useColorUpdateContext() {\r\n  return useContext(ColorUpdateContext);\r\n}\r\n\r\nconst ColorProvider = ({ children }) => {\r\n  const [state, setState] = useState({\r\n    changeBackground: false,\r\n    eyedropOnOff: false,\r\n    backgroundColor: { rgb: \"rgb(255, 255, 255)\", hex: \"#ffffff\" },\r\n    imageHover: {},\r\n    selectedColor: { rgb: \"rgb(255, 255, 255)\", hex: \"#ffffff\" },\r\n    eyedropColor: {},\r\n  });\r\n\r\n  const { changeBackground, selectedColor, eyedropColor } = state;\r\n\r\n  const handleSelectedColor = (color) => {\r\n    let toString = `rgb(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b})`;\r\n    setState((prev) => {\r\n      return { ...prev, selectedColor: { rgb: toString, hex: color.hex } };\r\n    });\r\n  };\r\n\r\n  const handleBackgroundColor = (selectedColor) => {\r\n    setState((prev) => {\r\n      return { ...prev, backgroundColor: selectedColor };\r\n    });\r\n  };\r\n\r\n  const handleEyedropColor = (rgb, hex) => {\r\n    setState((prev) => {\r\n      return { ...prev, eyedropColor: { rgb, hex } };\r\n    });\r\n  };\r\n\r\n  const handleChangeBackground = (boolean) => {\r\n    setState((prev) => {\r\n      return { ...prev, changeBackground: !boolean };\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (changeBackground === true) {\r\n      handleBackgroundColor(selectedColor);\r\n    }\r\n  }, [changeBackground, selectedColor]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(eyedropColor).length > 0) {\r\n      setState((prev) => {\r\n        return { ...prev, selectedColor: eyedropColor };\r\n      });\r\n    }\r\n  }, [eyedropColor]);\r\n\r\n  return (\r\n    <ColorContext.Provider value={state}>\r\n      <ColorUpdateContext.Provider\r\n        value={{\r\n          handleBackgroundColor: handleBackgroundColor,\r\n          handleEyedropColor: handleEyedropColor,\r\n          handleChangeBackground: handleChangeBackground,\r\n          handleSelectedColor: handleSelectedColor,\r\n        }}\r\n      >\r\n        {children}\r\n      </ColorUpdateContext.Provider>\r\n    </ColorContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ColorProvider;\r\n","import { useState } from \"react\";\r\nimport { Gradient } from \"react-gradient\";\r\n\r\n//Styling\r\nimport \"../styles/Handler.css\";\r\nimport { ChakraProvider, Circle, Spacer, Flex, Box } from \"@chakra-ui/react\";\r\n\r\n//Context\r\nimport { useColorUpdateContext } from \"../context/ColorContext\";\r\n\r\nconst PaletteHandler = ({ color_object, retrieveSwatch }) => {\r\n  const [selectedSwatch, setSelectedSwatch] = useState({});\r\n\r\n  const { handleSelectedColor } = useColorUpdateContext();\r\n\r\n  const swatches = [\r\n    color_object[0],\r\n    color_object[1],\r\n    color_object[2],\r\n    color_object[3],\r\n    color_object[4],\r\n    color_object[5],\r\n    color_object[6],\r\n    color_object[7],\r\n    color_object[8],\r\n    color_object[9],\r\n  ];\r\n\r\n  const gradient = [\r\n    [color_object[0], color_object[1]],\r\n    [color_object[2], color_object[3]],\r\n    [color_object[4], color_object[5]],\r\n    [color_object[6], color_object[7]],\r\n    [color_object[8], color_object[9]],\r\n  ];\r\n\r\n  function hexToRgb(hex) {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n      ? {\r\n          r: parseInt(result[1], 16),\r\n          g: parseInt(result[2], 16),\r\n          b: parseInt(result[3], 16),\r\n        }\r\n      : null;\r\n  }\r\n\r\n  const getSwatch = (hex) => {\r\n    let swatch = { rgb: hexToRgb(hex), hex: hex };\r\n    setSelectedSwatch(swatch);\r\n  };\r\n\r\n  const generateSwatches = (swatches) => {\r\n    return swatches.map((color) => {\r\n      return (\r\n        <ChakraProvider key={color}>\r\n          <Circle\r\n            size=\"40px\"\r\n            bg={color}\r\n            cursor=\"pointer\"\r\n            title={`Click to copy hex value to Color Picker. (${color})`}\r\n            //onClick will copy the hexvalue of the swatch selected\r\n            onMouseOver={() => getSwatch(color)}\r\n            onClick={() => {\r\n              retrieveSwatch(selectedSwatch);\r\n              handleSelectedColor(selectedSwatch);\r\n            }}\r\n          />\r\n          <Spacer />\r\n        </ChakraProvider>\r\n      );\r\n    });\r\n  };\r\n\r\n  const generateGradient = (gradient) => {\r\n    return (\r\n      <Gradient\r\n        gradients={gradient}\r\n        property=\"background\"\r\n        gradientType=\"linear\"\r\n        element=\"div\"\r\n        angle=\"30deg\"\r\n        transitionType=\"sequential\"\r\n        duration=\"1500\"\r\n        className=\"gradient\"\r\n      ></Gradient>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ChakraProvider key={color_object.id}>\r\n      <Box>\r\n        <Flex\r\n          direction={\"column\"}\r\n          bg={\"rgba(255, 255, 255, 0.25)\"}\r\n          padding={\"10px\"}\r\n          borderRadius={\"15px\"}\r\n        >\r\n          <Flex direction={\"row\"}>{generateSwatches(swatches)}</Flex>\r\n          <Box marginTop={\"10px\"} width={\"100%\"}>\r\n            {generateGradient(gradient)}\r\n          </Box>\r\n        </Flex>\r\n      </Box>\r\n    </ChakraProvider>\r\n  );\r\n};\r\n\r\nexport default PaletteHandler;\r\n","import { SketchPicker } from \"react-color\";\r\nimport { useEffect, useState } from \"react/cjs/react.development\";\r\n\r\n//Styling\r\nimport { ChakraProvider, Box } from \"@chakra-ui/react\";\r\n\r\n//Components\r\nimport {\r\n  useColorContext,\r\n  useColorUpdateContext,\r\n} from \"../context/ColorContext\";\r\n\r\nconst ColorPicker = ({ eyedrop_rgb, eyedrop_hex }) => {\r\n  const { selectedColor } = useColorContext();\r\n  const { handleEyedropColor, handleSelectedColor } = useColorUpdateContext();\r\n\r\n  const [state, setState] = useState({\r\n    displayColorPicker: false,\r\n    color: {\r\n      rgb: \"rgb(255, 255, 255)\",\r\n      hex: \"#ffffff\",\r\n    },\r\n  });\r\n\r\n  const { displayColorPicker, color } = state;\r\n\r\n  const handleClick = () => {\r\n    setState((prev) => {\r\n      return { ...prev, displayColorPicker: true };\r\n    });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setState((prev) => {\r\n      return { ...prev, displayColorPicker: false };\r\n    });\r\n  };\r\n\r\n  const handleChange = (color) => {\r\n    let toString = `rgb(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b})`;\r\n    setState((prev) => {\r\n      return { ...prev, color: { rgb: toString, hex: color.hex } };\r\n    });\r\n    handleSelectedColor(color);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (color.rgb !== eyedrop_rgb) {\r\n      setState((prev) => {\r\n        return { ...prev, color: { rgb: eyedrop_rgb, hex: eyedrop_hex } };\r\n      });\r\n      handleEyedropColor(eyedrop_rgb, eyedrop_hex);\r\n    }\r\n  }, [eyedrop_rgb, eyedrop_hex, color.rgb, handleEyedropColor]);\r\n\r\n  return (\r\n    <ChakraProvider>\r\n      <Box\r\n        w={\"40px\"}\r\n        h={\"40px\"}\r\n        borderRadius={\"10px\"}\r\n        padding={\"3px\"}\r\n        bg={\"gray\"}\r\n        alignContent={\"center\"}\r\n      >\r\n        <Box\r\n          bg={selectedColor.rgb}\r\n          borderRadius={\"8px\"}\r\n          w={\"34px\"}\r\n          h={\"34px\"}\r\n          onClick={() => handleClick()}\r\n        >\r\n          {displayColorPicker ? (\r\n            <Box\r\n              style={{\r\n                position: \"relative\",\r\n                zIndex: \"auto\",\r\n                bottom: \"19.2rem\",\r\n                right: \"13.5rem\",\r\n              }}\r\n              onMouseLeave={handleClose}\r\n            >\r\n              <SketchPicker color={selectedColor} onChange={handleChange} />\r\n            </Box>\r\n          ) : null}\r\n        </Box>\r\n      </Box>\r\n    </ChakraProvider>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;\r\n","import { EyeDropper } from \"react-eyedrop\";\r\nimport { useEffect, useState } from \"react/cjs/react.development\";\r\n\r\n//Icons\r\nimport { CgColorPicker } from \"react-icons/cg\";\r\n\r\n//Styling\r\nimport \"../styles/Handler.css\";\r\nimport { ChakraProvider, Box, Button, Flex, Spacer } from \"@chakra-ui/react\";\r\n\r\n//Components\r\nimport ColorPicker from \"./ColorPicker\";\r\nimport { useColorUpdateContext } from \"../context/ColorContext\";\r\n\r\nconst EyeDrop = ({ imageHover }) => {\r\n  const [eyedropState, setEyedropState] = useState({\r\n    image: null,\r\n    pickedColor: { rgb: \"rgb(255, 255, 255)\", hex: \"#ffffff\" },\r\n    eyedropOnce: true,\r\n  });\r\n\r\n  const { handleEyedropColor } = useColorUpdateContext();\r\n\r\n  const { eyedropOnce } = eyedropState;\r\n  const { rgb, hex } = eyedropState.pickedColor;\r\n\r\n  const handleChangeColor = ({ rgb, hex }) => {\r\n    setEyedropState((prev) => {\r\n      return { ...prev, pickedColor: { rgb, hex } };\r\n    });\r\n    handleEyedropColor(rgb, hex);\r\n  };\r\n\r\n  // const toggleOnce = () => {\r\n  //   setEyedropState((prev) => {\r\n  //     return {\r\n  //       ...prev,\r\n  //       eyedropOnce: !eyedropState.eyedropOnce,\r\n  //     };\r\n  //   });\r\n  // };\r\n\r\n  useEffect(() => {\r\n    setEyedropState((prev) => {\r\n      return { ...prev, imageHover };\r\n    });\r\n  }, [imageHover]);\r\n\r\n  return (\r\n    <ChakraProvider>\r\n      <Flex direction={\"row\"}>\r\n        <ColorPicker eyedrop_rgb={rgb} eyedrop_hex={hex} />\r\n        <Spacer />\r\n        <Button colorScheme=\"teal\" variant=\"solid\">\r\n          <Box fontSize={\"16px\"}>\r\n            <CgColorPicker position={\"fixed\"} />\r\n          </Box>\r\n          <Box position={\"absolute\"} opacity={\"0\"} top={\"0px\"} left={\"0px\"}>\r\n            <EyeDropper\r\n              onChange={handleChangeColor}\r\n              once={eyedropOnce}\r\n              pickRadius={1}\r\n              cursorActive=\"crosshair\"\r\n            />\r\n          </Box>\r\n        </Button>\r\n      </Flex>\r\n    </ChakraProvider>\r\n  );\r\n};\r\n\r\nexport default EyeDrop;\r\n","import { useContext, useState, createContext } from \"react\";\r\nimport { useColorContext } from \"./ColorContext\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst TextContext = createContext();\r\nconst TextUpdateContext = createContext();\r\n\r\nexport function useTextContext() {\r\n  return useContext(TextContext);\r\n}\r\n\r\nexport function useTextUpdateContext() {\r\n  return useContext(TextUpdateContext);\r\n}\r\n\r\nconst TextProvider = ({ children }) => {\r\n  const [state, setState] = useState([]);\r\n\r\n  const { selectedColor } = useColorContext();\r\n\r\n  const handleNewText = () => {\r\n    setState((prev) => {\r\n      return [\r\n        ...prev,\r\n        {\r\n          id: nanoid(),\r\n          content: \"text\",\r\n          fontSize: \"11pt\",\r\n          readOnly: \"false\",\r\n          changeTextColor: false,\r\n          color: { rgb: \"rgb(0,0,0)\", hex: \"#000000\" },\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  const handleEditText = (text) => {\r\n    let selectedText = text;\r\n\r\n    setState((prev) => {\r\n      return prev.filter((obj) => {\r\n        return obj.id !== selectedText.id;\r\n      });\r\n    });\r\n\r\n    setState((prev) => {\r\n      return [\r\n        ...prev,\r\n        {\r\n          id: selectedText.id,\r\n          content: \"yo\",\r\n          fontSize: selectedText.fontSize,\r\n          readOnly: selectedText.readOnly,\r\n          color: selectedText.color,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  // const handleChangeTextColor = (text_object) => {\r\n  //   let selectedText = text_object;\r\n\r\n  //   setState((prev) => {\r\n  //     return [\r\n  //       prev.filter((obj) => {\r\n  //         return obj.id !== selectedText.id;\r\n  //       }),\r\n  //       {\r\n  //         id: selectedText.id,\r\n  //         content: selectedText.content,\r\n  //         fontSize: selectedText.fontSize,\r\n  //         readOnly: selectedText.readOnly,\r\n  //         changeTextColor: !selectedText.changeTextColor,\r\n  //         color: selectedText.color,\r\n  //       },\r\n  //     ];\r\n  //   });\r\n  // };\r\n\r\n  const handleTextColor = (text_object) => {\r\n    let selectedText = text_object;\r\n\r\n    console.log(selectedColor.rgb);\r\n\r\n    setState((prev) => {\r\n      return [\r\n        prev.filter((obj) => {\r\n          return obj.id !== selectedText.id;\r\n        }),\r\n        {\r\n          id: selectedText.id,\r\n          content: selectedText.content,\r\n          fontSize: selectedText.fontSize,\r\n          readOnly: selectedText.readOnly,\r\n          changeTextColor: !selectedText.changeTextColor,\r\n          color: selectedColor,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  return (\r\n    <TextContext.Provider value={{ state: state }}>\r\n      <TextUpdateContext.Provider\r\n        value={{\r\n          handleNewText: handleNewText,\r\n          handleEditText: handleEditText,\r\n          handleTextColor: handleTextColor,\r\n        }}\r\n      >\r\n        {children}\r\n      </TextUpdateContext.Provider>\r\n    </TextContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TextProvider;\r\n","import { Rnd } from \"react-rnd\";\r\nimport { EditText } from \"react-edit-text\";\r\n\r\n//Chakra UI\r\nimport \"../styles/Handler.css\";\r\nimport { ChakraProvider, Button } from \"@chakra-ui/react\";\r\n\r\n//Icons\r\nimport { CgColorBucket } from \"react-icons/cg\";\r\n\r\n//Components\r\nimport { useTextContext, useTextUpdateContext } from \"../context/TextContext\";\r\n\r\nconst TextHandler = () => {\r\n  const { state } = useTextContext();\r\n  const { handleTextColor } = useTextUpdateContext();\r\n\r\n  // const getFocus = (id) => {\r\n  //   document.getElementById(id).focus();\r\n  //   document.querySelector(id).addEventListener(\"keypress\", function (e) {\r\n  //     if (e.key === \"Enter\") {\r\n  //       document.getElementById(id).blur();\r\n  //     }\r\n  //   });\r\n  // };\r\n\r\n  if (state) {\r\n    return state.map((text) => {\r\n      return (\r\n        <ChakraProvider key={text.id}>\r\n          <Rnd\r\n            id={text.id}\r\n            bounds=\".boundWindow\"\r\n            minWidth=\"10%\"\r\n            minHeight=\"10%\"\r\n            lockAspectRatio={false}\r\n            cancel=\".cancel\"\r\n            className=\"panningDisabled\"\r\n          >\r\n            <EditText\r\n              id={text.id}\r\n              name=\"textbox1\"\r\n              defaultValue={text.content}\r\n              style={{\r\n                padding: \"10px\",\r\n                fontSize: \"36px\",\r\n                color: text.color.rgb,\r\n              }}\r\n              className=\"panningDisabled\"\r\n            />\r\n            <Button\r\n              position=\"absolute\"\r\n              bottom=\"5px\"\r\n              right=\"5px\"\r\n              size=\"50px\"\r\n              colorScheme=\"teal\"\r\n              variant=\"solid\"\r\n              onClick={() => handleTextColor(text)}\r\n            >\r\n              <CgColorBucket />\r\n            </Button>\r\n          </Rnd>\r\n        </ChakraProvider>\r\n      );\r\n    });\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default TextHandler;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport useWindowDimensions from \"../util/useWindowDimensions\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { TransformComponent, TransformWrapper } from \"react-zoom-pan-pinch\";\r\nimport { usePalette } from \"color-thief-react\";\r\n\r\n//Styling\r\nimport \"../styles/Handler.css\";\r\nimport { ChakraProvider, Box, Button } from \"@chakra-ui/react\";\r\n\r\n//Icons\r\nimport { RiImageAddFill, RiCheckFill } from \"react-icons/ri\";\r\nimport { BsBoxArrowDownRight } from \"react-icons/bs\";\r\nimport { IoText } from \"react-icons/io5\";\r\nimport { CgColorBucket } from \"react-icons/cg\";\r\n\r\n//Components\r\nimport RenderImages from \"./ImgRender\";\r\nimport PaletteHandler from \"./PaletteRender\";\r\nimport EyeDrop from \"./Eyedropper\";\r\nimport {\r\n  useColorContext,\r\n  useColorUpdateContext,\r\n} from \"../context/ColorContext\";\r\nimport TextHandler from \"./TextHandler\";\r\nimport { useTextUpdateContext } from \"../context/TextContext\";\r\n\r\nconst ImgHandler = () => {\r\n  const [selectedImages, setSelectedImages] = useState([]);\r\n\r\n  const { backgroundColor, changeBackground } = useColorContext();\r\n  const { handleChangeBackground } = useColorUpdateContext();\r\n\r\n  const { handleNewText } = useTextUpdateContext();\r\n\r\n  //Determines which color swatches should be shown\r\n  const [chosenImage, setChosenImage] = useState();\r\n  const getChosenImage = (chosenImage) => {\r\n    setChosenImage(chosenImage);\r\n  };\r\n\r\n  //State used for eyedrop color picker\r\n  const [imageHover, setImageHover] = useState();\r\n  const getHoveredImage = (hoveredImage) => {\r\n    setImageHover(hoveredImage);\r\n  };\r\n\r\n  //Get swatch from palette on-click\r\n  const [selectedSwatch, setSelectedSwatch] = useState({});\r\n  const retrieveSwatch = (selectedSwatch) => {\r\n    setSelectedSwatch(selectedSwatch);\r\n  };\r\n\r\n  //Get color data from loaded image\r\n  const { data } = usePalette(dataPlacementHolder(), 10, \"hex\");\r\n\r\n  //Window dimensions\r\n  const { height, width } = useWindowDimensions();\r\n\r\n  //Data Handeling Functions\r\n  function dataPlacementHolder() {\r\n    return selectedImages.length === 0\r\n      ? 0\r\n      : selectedImages[selectedImages.length - 1].blob;\r\n  }\r\n  function filterArray(source, data) {\r\n    let color_array = (source[source.length - 1].color_data = data);\r\n    if (typeof color_array === \"object\") {\r\n      return color_array;\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    console.log(\"render\");\r\n    if (data) {\r\n      setSelectedImages((prevImages) => [\r\n        ...prevImages,\r\n        filterArray(prevImages, data),\r\n      ]);\r\n      setSelectedImages((prevImages) =>\r\n        prevImages.filter((object) => object.id)\r\n      );\r\n    }\r\n    return () => {\r\n      console.log(\"unmount\");\r\n    };\r\n  }, [data]);\r\n\r\n  const imageHandleChange = (e) => {\r\n    //if file is selected...\r\n    if (e.target.files) {\r\n      //create an array out of the list of files, convert to blob and form new list of them\r\n      const fileArray = Array.from(e.target.files).map((file) => {\r\n        return { blob: URL.createObjectURL(file), id: nanoid() };\r\n      });\r\n\r\n      setSelectedImages((prevImages) => prevImages.concat(fileArray));\r\n\r\n      //This is useful for refreshing the page and removing all previously uploaded files\r\n      Array.from(e.target.files).map((file) => URL.revokeObjectURL(file));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChakraProvider>\r\n      <TransformWrapper\r\n        //initialization\r\n        initialScale={0.5}\r\n        minScale={0.5}\r\n        maxScale={1}\r\n        initialPositionX={width * 0.25}\r\n        initialPositionY={height * 0.25}\r\n        centerOnInit={true}\r\n        centerZoomedOut={true}\r\n        limitToBounds={true}\r\n        //panning\r\n        panning={{ excluded: [\"panningDisabled\", \"wheelDisabled\"] }}\r\n        //scroll-wheel\r\n        wheel={{ step: 0.1 }}\r\n      >\r\n        {({ resetTransform }) => (\r\n          <React.Fragment>\r\n            <Box\r\n              bg=\"gray\"\r\n              className=\"panningDisabled wheelDisabled\"\r\n              overflow=\"hidden\"\r\n              w={width}\r\n              h={height}\r\n            >\r\n              <TransformComponent>\r\n                <Box\r\n                  key=\"canvas\"\r\n                  flexDirection=\"row\"\r\n                  bg={backgroundColor.rgb}\r\n                  h=\"56.25vmax\"\r\n                  w=\"100vmax\"\r\n                  className=\"boundWindow\"\r\n                >\r\n                  <TextHandler />\r\n                  <RenderImages\r\n                    source={selectedImages}\r\n                    getChosenImage={getChosenImage}\r\n                    getHoveredImage={getHoveredImage}\r\n                  />\r\n                </Box>\r\n              </TransformComponent>\r\n              <Box position=\"fixed\" bottom=\"20px\" left=\"25px\">\r\n                {selectedImages.length > 0 && chosenImage ? (\r\n                  <PaletteHandler\r\n                    color_object={\r\n                      selectedImages.find((object) => object.id === chosenImage)\r\n                        .color_data\r\n                    }\r\n                    retrieveSwatch={retrieveSwatch}\r\n                  />\r\n                ) : null}\r\n              </Box>\r\n              <Box position={\"fixed\"} bottom={\"220px\"} right={\"25px\"}>\r\n                <Button\r\n                  colorScheme=\"teal\"\r\n                  variant=\"solid\"\r\n                  onClick={() => {\r\n                    handleChangeBackground(changeBackground);\r\n                  }}\r\n                >\r\n                  {changeBackground ? <RiCheckFill /> : <CgColorBucket />}\r\n                </Button>\r\n              </Box>\r\n              <Box position={\"fixed\"} bottom={\"170px\"} right={\"25px\"}>\r\n                <Button\r\n                  colorScheme=\"teal\"\r\n                  variant=\"solid\"\r\n                  onClick={() => handleNewText()}\r\n                >\r\n                  <IoText />\r\n                </Button>\r\n              </Box>\r\n              <Box\r\n                position={\"fixed\"}\r\n                bottom={\"120px\"}\r\n                right={\"25px\"}\r\n                w={\"103px\"}\r\n              >\r\n                <EyeDrop\r\n                  imageHover={imageHover}\r\n                  selectedSwatch={selectedSwatch}\r\n                />\r\n              </Box>\r\n              <Box position=\"fixed\" bottom=\"70px\" right=\"25px\">\r\n                <Button\r\n                  colorScheme=\"teal\"\r\n                  variant=\"solid\"\r\n                  onClick={() => resetTransform()}\r\n                >\r\n                  <BsBoxArrowDownRight />\r\n                </Button>\r\n              </Box>\r\n              <Box position=\"fixed\" bottom=\"20px\" right=\"25px\">\r\n                <Button\r\n                  leftIcon={<RiImageAddFill />}\r\n                  colorScheme=\"teal\"\r\n                  variant=\"solid\"\r\n                  fontSize=\"11pt\"\r\n                  className=\"hide_4_print\"\r\n                >\r\n                  Upload\r\n                  <input\r\n                    type=\"file\"\r\n                    multiple\r\n                    id=\"file\"\r\n                    accept=\"image/png, image/jpeg, image/gif\"\r\n                    onChange={imageHandleChange}\r\n                    style={{\r\n                      opacity: \"0%\",\r\n                      position: \"absolute\",\r\n                      width: \"100%\",\r\n                      height: \"auto\",\r\n                    }}\r\n                  />\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </React.Fragment>\r\n        )}\r\n      </TransformWrapper>\r\n    </ChakraProvider>\r\n  );\r\n};\r\n\r\nexport default ImgHandler;\r\n","import \"./styles/App.css\";\nimport ImgHandler from \"./components/ImgHandler\";\nimport ColorProvider from \"./context/ColorContext\";\nimport TextProvider from \"./context/TextContext\";\n\nfunction App() {\n  return (\n    <ColorProvider>\n      <TextProvider>\n        <ImgHandler />\n      </TextProvider>\n    </ColorProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}